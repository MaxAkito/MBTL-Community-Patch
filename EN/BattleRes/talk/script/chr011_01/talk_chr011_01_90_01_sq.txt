
Talk <-  // 何を追加してもいいが Finalize() で関数のみになること
{
	IsDone = 0, // ロードできたか
	Count = 0,
	Show = 0, // 描画が有効かどうか
};

// はじまり
function Talk::Initialize()
{
	local p = Talk;
	local fnc = tPAni;

	p.IsDone = 1; // とりあえず成功にしておく

	// 枠生成(ファイル単位)
	p.PA_Ed <- tPAni.CDat();
	p.PA_Manager <- fnc.CAniManager(); // マネージャ生成

	// PAniデータ読み込み
	local sFilePath = "./BattleRes/talk/st_pat";
	
	local sPcFile = format( "%s/chr019_a/chr019_a_ed00.pat", sFilePath );
	TalkSqCallback.UseFileInSquirrel( {type=0, file_name=sPcFile} );
	if( p.PA_Ed.Load( sPcFile ) == 0 )
	{
		//ロード失敗
		print( format( "\n >> %s Load error.", sPcFile ) );
		p.IsDone = 0;
	}
	else
	{
		//ロード成功
		p.Show = 1;//描画を有効にする
		
		//アニメーションを登録する
		local prio = 400; // 全体プライオリティ

		local framestep = 1.0/60; // 1フレーム
		local fWait = 0.0;
		local fr = 0;
		
		fr = p.PA_Manager.Add( p.PA_Ed, "dummy" );
		fr.SetPrio( prio );
		
		fr.AddTag( "wait" );
		fr.AddFrame( "", framestep );
		fr.AddModeTagJump( "wait", _PAniFlag_JpGrater, 1 );//Modeが値より大きくなるまでジャンプして非表示		
		
		fr.AddFrame( "bg000", framestep * 10 );
		fr.AddFrame( "bg001", framestep * 10 );
		fr.AddFrame( "bg002", framestep * 10 );
		fr.AddFrame( "bg003", framestep * 10 );
		fr.AddFrame( "bg004", framestep * 10 );
		fr.AddFrame( "bg005", framestep * 10 );

		fr.AddTag("loop");
		fr.AddFrame( "bg100", framestep * 25 );
		fr.AddFrame( "bg101", framestep * 25 );
		fr.AddTagJump("loop");	
		
		
		fr = p.PA_Manager.Add( p.PA_Ed, "dummy2" );
		fr.SetPrio( prio+1 );
		
		fr.AddTag( "wait2" );
		fr.AddFrame( "", framestep );
		fr.AddModeTagJump( "wait2", _PAniFlag_JpGrater, 2 );//Modeが値より大きくなるまでジャンプして非表示		
		
		fr.AddFrame( "bg200", framestep * 50 );
		fr.AddFrame( "bg201", framestep * 50 );
		fr.AddFrame( "bg202", framestep * 50 );
		fr.AddFrame( "bg203", framestep * 50 );

		fr.AddTag("loop2");
		for( local i=300; i<=323; i++ )
		{
			fr.AddFrame( format("bg%03d",i), framestep * 25 );
		}
		fr.AddTagJump("loop2");	
		
		fr = p.PA_Manager.Add( p.PA_Ed, "dummy3" );
		fr.SetPrio( prio+2 );
		
		fr.AddTag( "wait3" );
		fr.AddFrame( "", framestep );
		fr.AddModeTagJump( "wait3", _PAniFlag_JpGrater, 3 );//Modeが値より大きくなるまでジャンプして非表示		
		
		fr.AddTag("loop3");
		fr.AddFrame( "ed_space000", framestep * 1000 );
		fr.AddFrame( "ed_space001", framestep * 1000 );
		fr.AddFrame( "ed_space002", framestep * 1000 );
		fr.AddFrame( "ed_space003", framestep * 1000 );
		fr.AddFrame( "ed_space004", framestep * 1000 );
		fr.AddFrame( "ed_space005", framestep * 1000 );
		fr.AddTagJump("loop3");	
	}
}

// 終了処理
function Talk::Finalize()
{
	local p = Talk;
	local fnc = tPAni;

	// アニメマネージャの解放、登録した中身も全部消える
	delete p.PA_Manager;

	// PAniオブジェクトの解放
	delete p.PA_Ed;

	delete Talk;

	print("\nTalk::Finalize()");
}

// 会話スクリプトからコールされる
function Talk::Call(call_no)
{
	print( format( "\nTalk Call:%d", call_no ) );
	
	local p = Talk;
	if( p.IsDone != 0 )
	{
		p.PA_Manager.SetMode(call_no);
	}
}

// 会話スクリプトからウェイト(アニメ終了待ち等の)問い合わせ
function Talk::Wait(call_no)
{
	print( format( "\nTalk Wait:%d", call_no ) );
	return( 0 );	// 0でウェイト終了、それ以外の値でウェイト状態をキープ
}


// スタッフロールが表示される前(ED会話が終わった)のタイミングでコールされる
function Talk::GotoStaffRoll()
{
	print( format( "\nTalk GotoStaffRoll" ) );
	
	local p = Talk;
	p.Show = 0; // 描画を無効にする
}

// 最後の一枚絵が表示される前(スタッフロールが終わった)のタイミングでコールされる
function Talk::GotoEndingLastCG()
{
	print( format( "\nTalk GotoEndingLastCG" ) );
	
	local p = Talk;
	p.Show = 0; // 描画を無効にする
}


//
function Talk::Update()
{
	local p = Talk;
	local fnc = tPAni;

	if( p.Show )
	{
		p.PA_Manager.Update();
		p.Count++;
	}
}

//
function Talk::Render(add_x, add_y)
{
	local p = Talk;
	local fnc = tPAni;
	
	if( p.Show )
	{
		local pa_cx = 1280/2;
		local pa_cy = 720/2;

		p.PA_Ed.SetPosition( pa_cx+add_x, pa_cy+add_y );
		p.PA_Manager.Render();
	}
	

	//print( format( "\n[Count:%d]", p.Count ) );
}



print("\n\ntitle.txt Running!!!");
